{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","qs","queryString","parse","window","location","search","state","size","undefined","s","parseInt","text","v","decodeURI","level","background","b","foreground","f","qrcodeAsBase64","handleClick","bind","canvas","document","createElement","context","getContext","image","Image","this","src","drawImage","uri","toDataURL","replace","a","setAttribute","dispatchEvent","MouseEvent","view","bubbles","cancelable","Container","Form","Group","Label","Control","type","defaultValue","onChange","event","setState","target","value","placeholder","min","max","color","onChangeComplete","hex","bgColor","fgColor","style","width","id","onLoad","btoa","XMLSerializer","serializeToString","getSVGDocument","onClick","React","Component","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0720db4b.chunk.js","sourcesContent":["import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Form from 'react-bootstrap/Form';\nimport queryString from 'query-string';\nimport { QRCode } from 'react-qr-svg';\nimport { GithubPicker } from 'react-color';\nimport Slider from 'rc-slider/lib/Slider';\nimport 'rc-slider/assets/index.css';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.qs = queryString.parse(window.location.search);\n    this.state = {\n      size: (this.qs.s === undefined || this.qs.s === null) ? 256 : parseInt(this.qs.s),\n      text: (this.qs.v === undefined || this.qs.v === null) ? 'https://threetinydots.github.io/qr' : decodeURI(this.qs.v),\n      level: 'Q',\n      background: (this.qs.b === undefined || this.qs.b === null) ? '#ffffff' : this.qs.b,\n      foreground: (this.qs.f === undefined || this.qs.f === null) ? '#000000' : this.qs.f,\n      qrcodeAsBase64: null\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick () {\n    let canvas = document.createElement('canvas');\n    let context = canvas.getContext('2d');\n    //let svg = document.getElementById('qrcode');//.querySelector('svg');\n    let image = new Image(this.state.size, this.state.size);\n    image.src = this.state.qrcodeAsBase64;\n    context.drawImage(image, 0, 0);\n    let uri = canvas\n      .toDataURL('image/png')\n      .replace('image/png', 'image/octet-stream');\n    //window.location = uri;\n    let a = document.createElement('a');\n    a.setAttribute('download', 'qrcode.png');\n    a.setAttribute('href', uri);\n    a.setAttribute('target', '_blank');\n    a.dispatchEvent(new MouseEvent('click', {\n      view: window,\n      bubbles: false,\n      cancelable: true\n    }));\n  }\n\n  render() {\n    return (\n      <Container>\n        <Form>\n          <Form.Group>\n            <Form.Label>text</Form.Label>\n            <Form.Control\n              type=\"text\"\n              defaultValue={this.state.text}\n              onChange={(event) => this.setState({ text: event.target.value })}\n              placeholder=\"https://threetinydots.github.io/qr\" />\n          </Form.Group>\n          <Form.Group>\n            <Form.Label>size {this.state.size}</Form.Label>\n            <Slider \n              value={this.state.size}\n              min={100}\n              max={1000}\n              onChange={(size) => this.setState({ size })} />\n          </Form.Group>\n          <Form.Group>\n            <Form.Label>background color</Form.Label>\n            <GithubPicker \n              color={ this.state.background }\n              onChangeComplete={(color) => this.setState({ background: color.hex })} />\n          </Form.Group>\n          <Form.Group>\n            <Form.Label>foreground color</Form.Label>\n            <GithubPicker \n              color={ this.state.foreground }\n              onChangeComplete={(color) => this.setState({ foreground: color.hex })} />\n          </Form.Group>\n          <QRCode\n            bgColor={this.state.background}\n            fgColor={this.state.foreground}\n            level={this.state.level}\n            style={{ width: this.state.size }}\n            value={this.state.text}\n            id=\"qrcode\"\n            onLoad={(event) => this.setState({ qrcodeAsBase64: 'data:image/svg+xml;base64,' + btoa(new XMLSerializer().serializeToString(event.target.getSVGDocument())) })} />\n          <div>\n            <button onClick={this.handleClick}>Click to download</button>\n          </div>\n        </Form>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}